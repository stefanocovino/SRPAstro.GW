""" Code to match FITS tables
    
Context : SRP.GW
Module  : SRPGWMatch
Author  : Stefano Covino
Date    : 31/10/2015
E-mail  : stefano.covino@brera.inaf.it
URL:    : http://www.merate.mi.astro.it/utenti/covino
Purpose : Coordinate match of FITS tables

SRPGWMatch -husage: SRPGWMatch [-h] [-c RA DEC] -f firstcat -o outfilematch outfiledisapp
                  outfileapp -r radius -s secondcat [-v] [--version]

optional arguments:
  -h, --help            show this help message and exit
  -c RA DEC, --coordcols RA DEC
                        Coordinate column labels
  -f firstcat, --firstcat firstcat
                        First table
  -o outfilematch outfiledisapp outfileapp, --outfile outfilematch outfiledisapp outfileapp
                        Output tables for matched, disappeared and appeared
                        sources
  -r radius, --radius radius
                        Radius for matching (arcsec)
  -s secondcat, --secondcat secondcat
                        Second table
  -v, --verbose         Fully describe operations
  --version             show program's version number and exit


History : (31/10/2015) First version.
"""

__version__ = '1.0.0'


import argparse, os
import numpy
from astropy.table import hstack, Table
from astropy.coordinates import SkyCoord
from astropy.coordinates import match_coordinates_sky
from astropy import units as u
import SRP.SRPGW as GW




parser = argparse.ArgumentParser()
parser.add_argument("-c", "--coordcols", action="store", nargs=2, default=('RA','DEC'), help="Coordinate column labels", metavar=('RA','DEC'))
#parser.add_argument("-d", "--deltamag", action="store", type=float, nargs=4, help="Add Delta(Mag) column and normalize to the first table.", metavar=('colmag', 'ecolmag', 'minmag', 'maxmag'))
parser.add_argument("-f", "--firstcat", action="store", help="First table", required=True, metavar='firstcat')
parser.add_argument("-o", "--outfile", action="store", nargs=3, help="Output tables for matched, disappeared and appeared sources", required=True, metavar=('outfilematch', 'outfiledisapp', 'outfileapp'))
parser.add_argument("-r", "--radius", action="store", type=float, help="Radius for matching (arcsec)", required=True, metavar='radius')
parser.add_argument("-s", "--secondcat", action="store", help="Second table", required=True, metavar='secondcat')
parser.add_argument("-v", "--verbose", action="store_true", help="Fully describe operations")
parser.add_argument("--version", action="version", version=__version__)
options = parser.parse_args()


#
if options.firstcat and options.secondcat and options.radius:
    #
    if not os.path.isfile(options.firstcat):
        parser.error ("First input file does not exist.")
    if not os.path.isfile(options.secondcat):
        parser.error ("Second input file does not exist.")
    if options.radius < 0.0:
        parser.error ("Radius must be positive.")
    #
    if options.verbose:
        print ("Reading table ", options.firstcat)
    dt1 = Table.read(options.firstcat, format='ascii.ecsv')
    if options.verbose:
        print ("Reading table ", options.secondcat)
    dt2 = Table.read(options.secondcat, format='ascii.ecsv')
    #
    ra = options.coordcols[0]
    dec = options.coordcols[1]
    if ra in dt1.columns.keys() and dec in dt1.columns.keys():
        c1 = SkyCoord(ra=dt1[ra], dec=dt1[dec])
    else:
        parser.error("RA,DEC coordinates not found in table ", options.firstcat)
    if ra in dt2.columns.keys() and dec in dt2.columns.keys():
        c2 = SkyCoord(ra=dt2[ra], dec=dt2[dec])
    else:
        parser.error("RA,DEC coordinates not found in table ", options.secondcat)
    #
    if options.verbose:
        print ("Tables contain %d and %d entries, respectively." % (len(c1),len(c2)))
        print ("Matching...")
    idx, d2d, d3d = match_coordinates_sky(c1, c2)
    xdi, d2di, d3di = match_coordinates_sky(c2, c1)
    #
    did = numpy.array(idx)
    dsep = numpy.array(d2d)
    isep = numpy.array(d2di)
    #
    selmatch = numpy.where(dsep <= options.radius/3600.0)
    selnomatch = numpy.where(dsep > options.radius/3600.0)
    selnomatchinv = numpy.where(isep > options.radius/3600.0)
    #
    if options.verbose:
        print ("Saving results...")
    d1 = dt1[selmatch]
    d2 = dt2[did][selmatch]
    restabm = hstack([d1,d2],metadata_conflicts='warn')
    restabm.meta['COMMENT'] = ["Table resulting from match between %s and %s with radius %.2f arcsec" % (options.firstcat, options.secondcat, options.radius),]
    #
    #if options.deltamag:
    #    if (1 <= int(options.detalmag[0]) <= len(dt1.columns)) and (1 <= int(options.detalmag[1]) <= len(dt1.columns)):
    #        restabm['DeltaMag'] = restabm[int(options.detalmag[0])-1] - restabm[int(options.detalmag[0])+len(dt1.columns)-1]
    #        restabm['eDeltaMag'] = numpy.sqrt(restabm[int(options.detalmag[1])-1]**2 + restabm[int(options.detalmag[1])+len(dt1.columns)-1]**2)
    #        median =  numpy.median(restabm['DeltaMag'][(restabm[int(options.detalmag[0])-1] >= options.deltamag[2]) & (restabm[int(options.detalmag[0])-1] <= options.deltamag[3])])
    #        if options.verbose:
    #            print ("Median difference between magnitudes in first and second table: %.3f" % median)
    #        restabm['DeltaMag'] = restabm['DeltaMag'] - median
    #        restabm.meta['COMMENT'] = ["Delta(Mag) corrected for the median difference %.3f." % (median),]
    #    else:
    #        if options.verbose:
    #            print ("Column %d or %d do not exist. No Delta (Mag) computed." % (options.deltamag[0],options.deltamag[1]))
    #
    if options.verbose:
        print ("%d matches found." % len(restabm))
    restabm.write(options.outfile[0],format='ascii.ecsv')
    #
    d1 = dt1[selnomatch]
    d1.meta['COMMENT'] = ["Table resulting from entries disappeared between %s and %s with radius %.2f arcsec" % (options.firstcat, options.secondcat, options.radius),]
    if options.verbose:
        print ("%d entries disappeared." % len(d1))
    d1.write(options.outfile[1],format='ascii.ecsv',)
    #
    d2 = dt2[selnomatchinv]
    d2.meta['COMMENT'] = ["Table resulting from entries appeared between %s and %s with radius %.2f arcsec" % (options.firstcat, options.secondcat, options.radius),]
    #
    #if options.deltamag:
    #    d2[int(options.detalmag[0])-1] = d2[int(options.detalmag[0])-1] + median
    #    d2.meta['COMMENT'] = ["Delta(Mag) corrected for the median difference %.3f." % (median),]
    #
    if options.verbose:
        print ("%d entries appeared." % len(d2))
    d2.write(options.outfile[2],format='ascii.ecsv')
else:
    parser.print_help()
#